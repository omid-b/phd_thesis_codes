#!/bin/csh
# This script uses GMT to generate plots for the tomography 
# inversion results in a directory.
# Note: This script requires:
#       (1)"realpath" command to find absolute paths;
#       to install:
#          - MAC: brew install coreutils
#       (2) ghostscript package (ps2epsi, epstopdf ...)
# Usage: csh plot_invdir.gmt invdir outputdir
# Note: outputdir is optional and if not given: outputdir = invdir
# Example use case of this script to plot the inversion results
# generated by the regularization parameter tests

# CODED BY: omid.bagherpur@gmail.com
# UPDATE: 25 Jan 2021

clear

if ($#argv == 0) then
    printf "Error Usage\n\n Usage: csh plot_invdir.gmt invdir outputdir\n\n"
    exit
endif

if (-e param.csh) then
    source param.csh
else
    printf "Error!\n Could not find 'param.csh' in current directory.\n\n"
    exit
endif


set invdir = `realpath $argv[1]`

if ($#argv == 1) then
  set outputdir = $invdir
else
  set outputdir = `realpath $argv[2]`
endif

printf "invdir: $invdir\noutputdir: $outputdir\n\n"

if (! -d $invdir) then
    printf "Error!\n Could not find invdir!\n\nUsage: csh plot_invdir.gmt invdir outputdir\n\n"
    exit
endif

if (! -d $outputdir) then
    printf "Error! The 'outputdir' does not exist!\n\nUsage: csh plot_invdir.gmt invdir outputdir\n\n"
    exit
endif

if (`ls $invdir|grep ^"matrix"|wc -l` == 0) then
    printf "Error!\n Could not find inversion results (e.g., 'dcg', 'dap', 'd4p') in the given 'invdir'!\n\nUsage: csh plot_invdir.gmt invdir outputdir\n\n"
    exit
endif

printf "Scale range: [$c_scale_range[1] $c_scale_range[2]]\nC/U plot flag: $plot_flags[1]\n2psi plot flag: $plot_flags[2]\n4psi plot flag: $plot_flags[3]\nraypath plot flag: $plot_flags[4]\n \n\n\nDo you want to continue (y/n)? "

# set uin = $<
set uin = 'y'
if ($uin == 'y' || $uin == 'Y') then
    printf "\n\n"
else
    printf "\n\nExit Program!\n\n"
    exit
endif

#------STEP1-------#
# 1) set gmt defaults
# 2) find region and projection
#------------------#

cd $outputdir

gmt set FONT_ANNOT_PRIMARY 18p,Helvetica,black
gmt set FONT_ANNOT_SECONDARY 18p,Helvetica,black
gmt set FORMAT_GEO_MAP ddd:mm:ssF
gmt set MAP_FRAME_TYPE plain
gmt set MAP_FRAME_PEN thick,black
gmt set MAP_ANNOT_OBLIQUE 6
gmt set MAP_ANNOT_OFFSET 10p
gmt set PS_MEDIA 1000px1000p
gmt set GMT_VERBOSE q 

set lon1 = `awk '{printf "%f\n",$1}' $invdir/dcg|sort -n|uniq|head -1`
set lon2 = `awk '{printf "%f\n",$1}' $invdir/dcg|sort -n|uniq|tail -1`
set lat1 = `awk '{printf "%f\n",$2}' $invdir/dcg|sort -n|uniq|head -1`
set lat2 = `awk '{printf "%f\n",$2}' $invdir/dcg|sort -n|uniq|tail -1`
set lon_mid = `echo $lon1 $lon2|awk '{print ($1+$2)/2}'`
set lat_mid = `echo $lat1 $lat2|awk '{print ($1+$2)/2}'`
set prj = "L$lon_mid/$lat_mid/$lat1/$lat2/700p"

set lon1 = `echo "$lon1 $margin_adjust[1]"|awk '{printf "%.1f",$1-$2}'`
set lon2 = `echo "$lon2 $margin_adjust[1]"|awk '{printf "%.1f",$1+$2}'`
set lat1 = `echo "$lat1 $margin_adjust[2]"|awk '{printf "%.1f",$1-$2}'`
set lat2 = `echo "$lat2 $margin_adjust[2]"|awk '{printf "%.1f",$1+$2}'`

set reg = "$lon1/$lon2/$lat1/$lat2"

if ($gmt_manual_reg[1] == 1) then
    printf "WARNING! map region is set manually!\n"
    set reg = $gmt_manual_reg[2]
endif

if ($gmt_manual_prj[1] == 1) then
    printf "WARNING! map projection is set manually!\n"
    set prj = $gmt_manual_prj[2]
endif

printf "gmt region: $reg\n"
printf "gmt projection: $prj\n\n"

#------STEP2-------#
# plot c, 2psi, 4psi
#------------------#

set tag = `basename $invdir`

# Isotropic maps
if ($plot_flags[1] == 1 && `ls $invdir|grep dcg|wc -l` != 0) then
    printf "  plotting the C/U map\n"
    set fn = $tag\_c
    set grdStep = `awk 'NR==4' $invdir/inxc|awk '{print $2}'`
    awk '{printf "%f %f %f\n",$1,$2,$4}' $invdir/dcg|gmt xyz2grd -Gc.grd -R$reg -I$grdStep
    gmt grd2cpt c.grd -Croma -L$c_scale_range[1]/$c_scale_range[2] -S`echo $c_scale_range[1] $c_scale_range[2]|awk '{printf "%f/%f/%s",$1+($2-$1)/5,$2-($2-$1)/5,($2-$1)/20}'` -Vq -Z > scale.cpt
    gmt psbasemap -X100p -J$prj -R$reg -Bx$annot[1] -By$annot[2] -BWseN -K -P  > $fn.ps
    gmt grdview c.grd -Cscale.cpt -J$prj -R$reg -Qi$raster_dpi -B -O -K -P  -Vq >> $fn.ps
    gmt pscoast -J$prj -R$reg -Di -W1p,black -Na -A5000 -I5 -B -O -K -P  -Vq >> $fn.ps
    echo 0 0|gmt psxy -J$prj -R$reg -Sc0.001p -Gblack -Wthin,black -O -P >> $fn.ps 
    if (`echo $OSTYPE|grep darwin|wc|awk '{print $1}'` == 1) then
        ps2eps $fn.ps >& /dev/null
        epstopdf $fn.eps --outfile=$fn.pdf
    else
        ps2epsi $fn.ps $fn.epsi
        epstopdf $fn.epsi --outfile=$fn.pdf 
    endif
    if (-e $invdir/dcg_syn) then
        printf "  plotting the C/U map (synthetic model)\n"
        set fn2 = $tag\_c_syn
        awk '{printf "%f %f %f\n",$1,$2,$4}' $invdir/dcg_syn|gmt xyz2grd -Gc_syn.grd -R$reg -I$grdStep
        gmt grd2cpt c_syn.grd -Croma -L$c_scale_range[1]/$c_scale_range[2] -S`echo $c_scale_range[1] $c_scale_range[2]|awk '{printf "%f/%f/%s",$1+($2-$1)/5,$2-($2-$1)/5,($2-$1)/20}'` -Vq -Z > scale_syn.cpt
        gmt psbasemap -X100p -J$prj -R$reg -Bx$annot[1] -By$annot[2] -BWseN -K -P  > $fn2.ps
        gmt grdview c_syn.grd -Cscale_syn.cpt -J$prj -R$reg -Qi$raster_dpi -B -O -K -P  -Vq >> $fn2.ps
        gmt pscoast -J$prj -R$reg -Di -W1p,black -Na -A5000 -I5 -B -O -K -P  -Vq >> $fn2.ps
        echo 0 0|gmt psxy -J$prj -R$reg -Sc0.001p -Gblack -Wthin,black -O -P >> $fn2.ps 
        if (`echo $OSTYPE|grep darwin|wc|awk '{print $1}'` == 1) then
            ps2eps $fn2.ps >& /dev/null
            epstopdf $fn2.eps --outfile=$fn2.pdf
        else
            ps2epsi $fn2.ps $fn2.epsi
            epstopdf $fn2.epsi --outfile=$fn2.pdf 
        endif
    endif
else
   set plot_flags[1] = 0 
endif

# 2psi maps
if ($plot_flags[2] == 1 && `ls $invdir|grep dap|wc -l` != 0) then
    printf "  plotting the 2psi map\n"
    set fn = $tag\_2psi
    if ($plot_flags[1] == 0) then
        set grdStep = `awk 'NR==4' $invdir/inxc|awk '{print $2}'`
        awk '{printf "%f %f %f\n",$1,$2,$4}' $invdir/dcg|gmt xyz2grd -Gc.grd -R$reg -I$grdStep
        gmt grd2cpt c.grd -Croma -L$c_scale_range[1]/$c_scale_range[2] -S`echo $c_scale_range[1] $c_scale_range[2]|awk '{printf "%f/%f/%s",$1+($2-$1)/5,$2-($2-$1)/5,($2-$1)/20}'` -Vq -Z > scale.cpt
    endif
    gmt psbasemap -X100p -J$prj -R$reg -Bx$annot[1] -By$annot[2] -BWseN -K -P  > $fn.ps
    gmt grdview c.grd -Cscale.cpt -J$prj -R$reg -Qi$raster_dpi -B -O -K -P  -Vq >> $fn.ps
    gmt pscoast -J$prj -R$reg -Di -W1p,black -Na -A5000 -I5 -B -O -K -P  -Vq >> $fn.ps
    @ j=1
    while ($j <= `cat $invdir/dap|wc -l`)
        set line = `awk NR==$j $invdir/dap|awk -v fac=$anis_bar_factor[1] '{printf "%f %f %f %f\n",$1,$2,$3,$7*fac}'`
        echo $line | gmt psxy -R$reg -J$prj -SV1c+jc -W$anis_bar_thickness,$anis_bar_color -G$anis_bar_color -O -K -Vq >> $fn.ps
        @ j++
    end
    echo "$anis_scale_bar_xy[1] $anis_scale_bar_xy[2] $anis_scale_bar_azim $anis_scale_bar_value $anis_bar_factor[1]"|awk '{print $1,$2,$3,$4*$5}' | gmt psxy -R$reg -J$prj -SV1c+jc -W$anis_bar_thickness,$anis_bar_color -G$anis_bar_color -O -K -Vq >> $fn.ps
    echo "$anis_scale_txt_xy[1] $anis_scale_txt_xy[2] $anis_scale_bar_value% anisotropy" | gmt pstext -J -R -F+f$annot_font_size -O -K -N >> $fn.ps
    echo 0 0|gmt psxy -J$prj -R$reg -Sc0.001p -Gblack -Wthin,black -O -P >> $fn.ps 
    if (`echo $OSTYPE|grep darwin|wc|awk '{print $1}'` == 1) then
        ps2eps $fn.ps >& /dev/null
        epstopdf $fn.eps --outfile=$fn.pdf
    else
        ps2epsi $fn.ps $fn.epsi
        epstopdf $fn.epsi --outfile=$fn.pdf 
    endif
    
    # synthetic model
#    if (-e $invdir/dap_syn) then
#        printf "  plotting the 2psi map (synthetic model)\n"
#        set fn2 = $tag\_2psi_syn
#        awk '{printf "%f %f %f\n",$1,$2,$4}' $invdir/dcg_syn|gmt xyz2grd -Gc_syn.grd -R$reg -I$grdStep
#        gmt grd2cpt c_syn.grd -Croma -L$c_scale_range[1]/$c_scale_range[2] -S`echo $c_scale_range[1] $c_scale_range[2]|awk '{printf "%f/%f/%s",$1+($2-$1)/5,$2-($2-$1)/5,($2-$1)/20}'` -Vq -Z > scale_syn.cpt
#        gmt psbasemap -X100p -J$prj -R$reg -Bx$annot[1] -By$annot[2] -BWseN -K -P  > $fn2.ps
#        gmt grdview c_syn.grd -Cscale_syn.cpt -J$prj -R$reg -Qi$raster_dpi -B -O -K -P  -Vq >> $fn2.ps
#        gmt pscoast -J$prj -R$reg -Di -W1p,black -Na -A5000 -I5 -B -O -K -P  -Vq >> $fn2.ps
#        @ j=1
#        while ($j <= `cat $invdir/dap_syn|wc -l`)
#            set line = `awk NR==$j $invdir/dap_syn|awk -v fac=$anis_bar_factor[1] '{printf "%f %f %f %f\n",$1,$2,$3,$7*fac}'`
#            echo $line | gmt psxy -R$reg -J$prj -SV1c+jc -W$anis_bar_thickness,$anis_bar_color -G$anis_bar_color -O -K -Vq >> $fn2.ps
#            @ j++
#        end
#        echo "$anis_scale_bar_xy[1] $anis_scale_bar_xy[2] $anis_scale_bar_azim $anis_scale_bar_value $anis_bar_factor[1]"|awk '{print $1,$2,$3,$4*$5}' | gmt psxy -R$reg -J$prj -SV1c+jc -W$anis_bar_thickness,$anis_bar_color -G$anis_bar_color -O -K -Vq >> $fn2.ps
#        echo "$anis_scale_txt_xy[1] $anis_scale_txt_xy[2] $anis_scale_bar_value% anisotropy" | gmt pstext -J -R -F+f$annot_font_size -O -K -N >> $fn2.ps
#        echo 0 0|gmt psxy -J$prj -R$reg -Sc0.001p -Gblack -Wthin,black -O -P >> $fn2.ps 
#        if (`echo $OSTYPE|grep darwin|wc|awk '{print $1}'` == 1) then
#            ps2eps $fn2.ps >& /dev/null
#            epstopdf $fn2.eps --outfile=$fn2.pdf
#        else
#            ps2epsi $fn2.ps $fn2.epsi
#            epstopdf $fn2.epsi --outfile=$fn2.pdf 
#        endif
    endif
else
   set plot_flags[2] = 0 
endif

# 4psi maps
if ($plot_flags[3] == 1 && `ls $invdir|grep d4p|wc -l` != 0) then
    printf "  plotting the 4psi map\n"
    set fn = $tag\_4psi
    if ($plot_flags[1] == 0) then
        set grdStep = `awk 'NR==4' $invdir/inxc|awk '{print $2}'`
        awk '{printf "%f %f %f\n",$1,$2,$4}' $invdir/dcg|gmt xyz2grd -Gc.grd -R$reg -I$grdStep
        gmt grd2cpt c.grd -Croma -L$c_scale_range[1]/$c_scale_range[2] -S`echo $c_scale_range[1] $c_scale_range[2]|awk '{printf "%f/%f/%s",$1+($2-$1)/5,$2-($2-$1)/5,($2-$1)/20}'` -Vq -Z > scale.cpt
    endif
    gmt psbasemap -X100p -J$prj -R$reg -Bx$annot[1] -By$annot[2] -BWseN -K -P  > $fn.ps
    gmt grdview c.grd -Cscale.cpt -J$prj -R$reg -Qi$raster_dpi -B -O -K -P  -Vq >> $fn.ps
    gmt pscoast -J$prj -R$reg -Di -W1p,black -Na -A5000 -I5 -B -O -K -P  -Vq >> $fn.ps
    @ j=1

    while ($j <= `cat $invdir/d4p|wc -l|awk '{print $1/2}'`)
        set k1 = `echo $j|awk '{print 2*$1-1}'`
        set k2 = `echo $j|awk '{print 2*$1}'`
        set line1 = `awk NR==$k1 $invdir/d4p|awk -v fac=$anis_bar_factor[2] '{printf "%f %f %f %f\n",$1,$2,$3,$7*fac}'`
        set line2 = `awk NR==$k2 $invdir/d4p|awk -v fac=$anis_bar_factor[2] '{printf "%f %f %f %f\n",$1,$2,$3,$7*fac}'`
        echo $line1 | gmt psxy -R$reg -J$prj -SV1c+jc -W$anis_bar_thickness,$anis_bar_color -G$anis_bar_color -O -K -Vq >> $fn.ps
        echo $line2 | gmt psxy -R$reg -J$prj -SV1c+jc -W$anis_bar_thickness,$anis_bar_color -G$anis_bar_color -O -K -Vq >> $fn.ps
        @ j++
    end
    echo "$anis_scale_bar_xy[1] $anis_scale_bar_xy[2] $anis_scale_bar_azim $anis_scale_bar_value $anis_bar_factor[2]"|awk '{print $1,$2,$3,$4*$5}' | gmt psxy -R$reg -J$prj -SV1c+jc -W$anis_bar_thickness,$anis_bar_color -G$anis_bar_color -O -K -Vq >> $fn.ps
    echo "$anis_scale_txt_xy $anis_scale_bar_value% anisotropy" | gmt pstext -J -R -F+f$annot_font_size -O -K -N >> $fn.ps
    echo 0 0|gmt psxy -J$prj -R$reg -Sc0.001p -Gblack -Wthin,black -O -P >> $fn.ps 
    if (`echo $OSTYPE|grep darwin|wc|awk '{print $1}'` == 1) then
        ps2eps $fn.ps >& /dev/null
        epstopdf $fn.eps --outfile=$fn.pdf
    else
        ps2epsi $fn.ps $fn.epsi
        epstopdf $fn.epsi --outfile=$fn.pdf 
    endif
    
    # synthetic model
    if (-e $invdir/d4p_syn) then
        printf "  plotting the 4psi map (synthetic model)\n"
        set fn2 = $tag\_4psi_syn
        awk '{printf "%f %f %f\n",$1,$2,$4}' $invdir/dcg_syn|gmt xyz2grd -Gc_syn.grd -R$reg -I$grdStep
        gmt grd2cpt c_syn.grd -Croma -L$c_scale_range[1]/$c_scale_range[2] -S`echo $c_scale_range[1] $c_scale_range[2]|awk '{printf "%f/%f/%s",$1+($2-$1)/5,$2-($2-$1)/5,($2-$1)/20}'` -Vq -Z > scale_syn.cpt
        gmt psbasemap -X100p -J$prj -R$reg -Bx$annot[1] -By$annot[2] -BWseN -K -P  > $fn2.ps
        gmt grdview c_syn.grd -Cscale_syn.cpt -J$prj -R$reg -Qi$raster_dpi -B -O -K -P  -Vq >> $fn2.ps
        gmt pscoast -J$prj -R$reg -Di -W1p,black -Na -A5000 -I5 -B -O -K -P  -Vq >> $fn2.ps
        @ j=1

        while ($j <= `cat $invdir/d4p_syn|wc -l|awk '{print $1/2}'`)
            set k1 = `echo $j|awk '{print 2*$1-1}'`
            set k2 = `echo $j|awk '{print 2*$1}'`
            set line1 = `awk NR==$k1 $invdir/d4p_syn|awk -v fac=$anis_bar_factor[2] '{printf "%f %f %f %f\n",$1,$2,$3,$7*fac}'`
            set line2 = `awk NR==$k2 $invdir/d4p_syn|awk -v fac=$anis_bar_factor[2] '{printf "%f %f %f %f\n",$1,$2,$3,$7*fac}'`
            echo $line1 | gmt psxy -R$reg -J$prj -SV1c+jc -W$anis_bar_thickness,$anis_bar_color -G$anis_bar_color -O -K -Vq >> $fn2.ps
            echo $line2 | gmt psxy -R$reg -J$prj -SV1c+jc -W$anis_bar_thickness,$anis_bar_color -G$anis_bar_color -O -K -Vq >> $fn2.ps
            @ j++
        end
        echo "$anis_scale_bar_xy[1] $anis_scale_bar_xy[2] $anis_scale_bar_azim $anis_scale_bar_value $anis_bar_factor[2]"|awk '{print $1,$2,$3,$4*$5}' | gmt psxy -R$reg -J$prj -SV1c+jc -W$anis_bar_thickness,$anis_bar_color -G$anis_bar_color -O -K -Vq >> $fn2.ps
        echo "$anis_scale_txt_xy $anis_scale_bar_value% anisotropy" | gmt pstext -J -R -F+f$annot_font_size -O -K -N >> $fn2.ps
        echo 0 0|gmt psxy -J$prj -R$reg -Sc0.001p -Gblack -Wthin,black -O -P >> $fn2.ps 
        if (`echo $OSTYPE|grep darwin|wc|awk '{print $1}'` == 1) then
            ps2eps $fn2.ps >& /dev/null
            epstopdf $fn2.eps --outfile=$fn2.pdf
        else
            ps2epsi $fn2.ps $fn2.epsi
            epstopdf $fn2.epsi --outfile=$fn2.pdf 
        endif
    endif
else
   set plot_flags[3] = 0 
endif

if ($plot_flags[1] == 1 || $plot_flags[2] == 1 || $plot_flags[3] == 1) then
    set zmin = `gmt grdinfo  c.grd |grep z_|awk '{print $3}'`
    set zmax =  `gmt grdinfo  c.grd |grep z_|awk '{print $5}'`
    printf "\n  grdinfo (min, max): (%.1f,  %.1f)\n" $zmin $zmax
endif


# raypaths
if ($plot_flags[4] == 1) then
    printf "  plotting the raypaths map\n"
    set fn = $tag\_rays
    gmt psbasemap -X100p -J$prj -R$reg -Bx$annot[1] -By$annot[2] -BWseN -K -P  > $fn.ps
    grep -v ">" $invdir/paths|awk 'NR % 2 == 1' > p1.tmp
    grep -v ">" $invdir/paths|awk 'NR % 2 == 0' > p2.tmp
    paste p1.tmp p2.tmp > p12.tmp
    set np = `cat p1.tmp|wc -l`
    echo "#Rays: $np" > $tag\_rays.txt
    @ j=1
    while ($j <= $np)
        awk NR==$j p12.tmp| awk '{printf "%f %f\n%f %f\n",$1,$2,$3,$4}'|gmt psxy -R$reg -J$prj -W0.5p,green4 -O -K -P -Vq >> $fn.ps
        @ j++
    end
    gmt pscoast -J$prj -R$reg -Di -W2p,gray40 -A5000 -I5 -B -O -K -P  -Vq >> $fn.ps
    #just to finalize the psfile:
    echo 0 0|gmt psxy -J$prj -R$reg -Sc0.001p -Gblack -Wthin,black -O -P >> $fn.ps 
    if (`echo $OSTYPE|grep darwin|wc|awk '{print $1}'` == 1) then
        ps2eps $fn.ps >& /dev/null
        epstopdf $fn.eps --outfile=$fn.pdf
    else
        ps2epsi $fn.ps $fn.epsi
        epstopdf $fn.epsi --outfile=$fn.pdf 
    endif
endif


if ($plot_flags[1] == 1 || $plot_flags[2] == 1 || $plot_flags[3] == 1) then
gmt set PS_MEDIA 600px120c
gmt psscale -Cscale.cpt -Dx1c/1c+w16c/1c+jTL+h -B$annot[3] -P > scale.ps
if (`echo $OSTYPE|grep darwin|wc|awk '{print $1}'` == 1) then
        ps2eps scale.ps >& /dev/null
        epstopdf scale.eps --outfile=$tag\_scale.pdf
    else
        ps2epsi scale.ps scale.epsi
        epstopdf scale.epsi --outfile=$tag\_scale.pdf 
    endif
endif

rm -f c*.grd gmt.conf gmt.history p1.tmp p2.tmp p12.tmp scale*.cpt scale*.eps* scale*.ps $tag*.eps* $tag*.ps

printf "\n\nDone!\n\n"


