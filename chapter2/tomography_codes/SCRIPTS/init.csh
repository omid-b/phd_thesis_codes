#!/bin/csh
# This script checks if the format of all parameters in the "param.csh" are correct, 
# and then creates the appropriate runset directory with the related input files. 

# Note that further scripts read their inputs from the input files generated by this script in the runset directories.
# Coded by omid.bagherpur@gmai.com

# * runsetdir: path to runset directory

# Important notes from Omid: 
# (1) I have hardwired setting the gradient damping parameter 
#     ("grad_dmp"; similar to smoothing) to "0.1*smth"
# (2) I set both "dmp_scale_flag" and "dmp_scale_value" to (0 0 0)
#     as we do not use these in our procedure 
# By fixing this variables, we would only have to deal with one damping 
# paramter and one smoothing parameters ("dmp" and "smth")
# One can still modify these variables in the "Adjustable Parameters" section in the ending lines of this script

clear

if (-e param.csh) then
    source param.csh
else
    printf "Error!\n Could not find 'param.csh' in current directory.\n\n"
    exit
endif


# check software directory
if (-d $softwaredir) then
    if (! -e $softwaredir/BIN/bac || ! -e $softwaredir/BIN/iac || ! -e $softwaredir/BIN/xsc) then
        printf "\nError!\n Could not find the compiled codes (bac/iac/xsc) in BIN directory!\n Check BIN directory content:\n $softwaredir/BIN\n\n"
        exit
    endif
else
    printf "\nError!\n Could not find softwaredir:\n $softwaredir\n\n"
    exit
endif

# check runsetdir
if ($#argv == 1) then
    set runsetdir = `realpath $argv[1]`
else
    printf "\nError!\n\nUsage: csh init.csh runsetdir\n\n"
    exit
endif

printf "runset: $runsetdir\n"

# check parameters
set num_periods = `echo $periods|wc -w`
set num_refvels = `echo $refvels|wc -w`
set num_iter = `echo $iter|wc -w`
set num_dmp = `echo $dmp|wc -w`
set num_smth = `echo $smth|wc -w`
set num_xsc_scale_limit = `echo $xsc_scale_limit|wc -w`
set num_xsc_interp_output = `echo $xsc_interp_output|wc -w`
set num_xsc_region_only = `echo $xsc_region_only|wc -w`

if ($num_periods != $num_refvels) then
    printf "\nError!\n Number of elements in 'periods' and 'refvels' does not match!\n\n Check param.csh!\n\n"
    exit
endif

if ($anis_flag != 0 && $anis_flag != 1 && $anis_flag != 2 )  then
    echo "\nError!\n 'anis_flag' must be 0, 1, or 2; Check param.csh!\n\n"
    exit
endif

if (`echo $grd_spacing|wc -w` != 2 )  then
    echo "\nError!\n 'grd_spacing' must be a list of two numbers; Check param.csh!\n\n"
    exit
endif

if ($grd_spacing[1] < $grd_spacing[2]) then
    echo "\nError!\n The first element in 'grd_spacing' must be larger than the second one!\n Check param.csh!\n\n"
    exit
endif


if ($max_iter > $iter[$num_iter]) then
    echo "\nError!\n The last element in 'iter' must be >= 'max_iter'!\n Check param.csh!\n\n"
    exit
endif

if ($int_sol > $max_iter) then
    echo "\nError!\n 'int_sol' must be less than 'max_iter'!\n Check param.csh!\n\n"
    exit
endif

if ($num_iter == 1) then
    printf "\nError!\n Number of elements in 'iter' should be greater than one!\n\n Check param.csh!\n\n"
    exit
endif

if ($num_dmp != 3) then
    printf "\nError!\n Number of elements in 'dmp' should be equal to 3!\n\n Check param.csh!\n\n"
    exit
endif

if ($num_smth != 3) then
    printf "\nError!\n Number of elements in 'smth' should be equal to 3!\n\n Check param.csh!\n\n"
    exit
endif

if ($num_xsc_scale_limit != 3) then
    printf "\nError!\n Number of elements in 'xsc_scale_limit' should be equal to 3!\n\n Check param.csh!\n\n"
    exit
endif

if ($num_xsc_interp_output != 2) then
    printf "\nError!\n Number of elements in 'xsc_interp_output' should be equal to 2!\n\n Check param.csh!\n\n"
    exit
endif

if ($num_xsc_region_only != 2) then
    printf "\nError!\n Number of elements in 'xsc_region_only' should be equal to 2!\n\n Check param.csh!\n\n"
    exit
endif

#====Adjustable Parameters====#
set dmp_scale_flag = (0 0 0) # a list of three flags (0 or 1)
set dmp_scale_value = (0 0 0) # a list of three values
#=============================#

# print the setting into the terminal
echo "softwaredir: $softwaredir"
echo "datasetdir: $datasetdir"
echo "periods: $periods"
echo "refvels: $refvels"
echo "anis_flag: $anis_flag"
echo "path_width: $path_width"
echo "grd_spacing: $grd_spacing"
echo "max_iter: $max_iter" 
echo "int_sol: $int_sol"
echo "iter: $iter"
echo "dmp: $dmp"
echo "dmp_scale_flag: $dmp_scale_flag"
echo "dmp_scale_value: $dmp_scale_value"
echo "smth: $smth"
echo "grad_dmp: $grad_dmp"
echo "plt_colsum_flag: $plt_colsum_flag"
echo "xsc_smth_flag: $xsc_smth_flag"
echo "xsc_scale_limit: $xsc_scale_limit"
echo "xsc_interp_output: $xsc_interp_output"
echo "xsc_region_only: $xsc_region_only"

# runset directory
if ( -d $runsetdir ) then
    printf "\n WARNING! The runset already exists!\n Do you want to delete and re-create (y/n)? "
    set uinp = $<

    if ( $uinp == 'y' || $uinp == 'Y') then
        rm -rf $runsetdir
        mkdir $runsetdir
    else
        printf "\nrunset initialization aborted!\n\n"
        exit
    endif
else
    printf "\nDo you want to continue (y/n)? "
    set uinp = $<

    if ( $uinp == 'y' || $uinp == 'Y') then
        mkdir $runsetdir
    else
        printf "\nrunset initialization aborted!\n\n"
        exit
    endif
    
endif

# generate datalist
ls $datasetdir/*.disp > $runsetdir/datalist

# generate inbac
printf "$runsetdir/datalist\n$num_periods\n" > $runsetdir/inbac

@ i=1
while ($i <= $num_periods)
    printf "$periods[$i] $refvels[$i]\n" >> $runsetdir/inbac
    @ i++
end

printf "$anis_flag\n$path_width\n$grd_spacing[1] $grd_spacing[2]\n" >> $runsetdir/inbac

# generate iniac
printf "$max_iter\n$int_sol\n" > $runsetdir/iniac

@ i=1
while ($i <= $num_iter)
    printf "$iter[$i] " >> $runsetdir/iniac
    @ i++
end

printf "\n$dmp[1] $dmp[2] $dmp[3]\n" >> $runsetdir/iniac
printf "$smth[1] $smth[2] $smth[3]\n" >> $runsetdir/iniac
printf "$grad_dmp[1] $grad_dmp[2] $grad_dmp[3]\n" >> $runsetdir/iniac
printf "$dmp_scale_flag[1] $dmp_scale_flag[2] $dmp_scale_flag[3]\n" >> $runsetdir/iniac
printf "$dmp_scale_value[1] $dmp_scale_value[2] $dmp_scale_value[3]\n" >> $runsetdir/iniac

# generate inxc
printf "$plt_colsum_flag\n$xsc_smth_flag\n" > $runsetdir/inxc
printf "$xsc_scale_limit[1] $xsc_scale_limit[2] $xsc_scale_limit[3]\n" >> $runsetdir/inxc
printf "$xsc_interp_output[1] $xsc_interp_output[2]\n" >> $runsetdir/inxc
printf "$xsc_region_only[1] $xsc_region_only[2]\n" >> $runsetdir/inxc

printf "\nSuccessful! The runset directory is initialized.\n\n" 
